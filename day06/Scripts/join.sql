CREATE SEQUENCE SEQ_BUYER;
CREATE TABLE TBL_BUYER(
   ID NUMBER CONSTRAINT PK_BUYER PRIMARY KEY,
   BUYER_NAME VARCHAR2(255) NOT NULL,
   BUYER_AGE NUMBER,
   BUYER_GENDER CHAR(10) CHECK (BUYER_GENDER IN ('남', '여')),
   BUYER_ADDRESS VARCHAR2(255),
   BUYER_PHONE VARCHAR2(255)
);

-- 상품
-- 브랜드, 이름, 가격, 재고
CREATE SEQUENCE SEQ_PRODUCT;
CREATE TABLE TBL_PRODUCT(
   ID NUMBER CONSTRAINT PK_PRODUCT PRIMARY KEY,
   PRODUCT_BRAND VARCHAR2(255) NOT NULL,
   PRODUCT_NAME VARCHAR2(255) NOT NULL,
   PRODUCT_PRICE NUMBER,
   PRODUCT_STOCK NUMBER DEFAULT 999
);

-- 주문 
-- 주문 상태, 주문 일자, 주문 완료 일자
CREATE SEQUENCE SEQ_ORDER;
CREATE TABLE TBL_ORDER(
   ID NUMBER CONSTRAINT PK_ORDER PRIMARY KEY,
   ORDER_STATUS VARCHAR2(255) DEFAULT '배송중',
   ORDER_START_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
   ORDER_END_DATE TIMESTAMP,
   BUYER_ID NUMBER,
   PRODUCT_ID NUMBER,
   CONSTRAINT FK_ORDER_BUYER FOREIGN KEY(BUYER_ID)
   REFERENCES TBL_BUYER(ID),
   CONSTRAINT FK_OUDER_PRODUCT FOREIGN KEY(PRODUCT_ID)
   REFERENCES TBL_PRODUCT(ID)
);

-- 이름, 나이, 성별, 주소, 핸드폰
INSERT INTO TBL_BUYER
VALUES (SEQ_BUYER.NEXTVAL, '짱구', 40, '남', '서울시 강남구', '010-3344-1234');
INSERT INTO TBL_BUYER
VALUES (SEQ_BUYER.NEXTVAL, '유리', 20, '여', '서울시 종로구', '010-7848-5656');
INSERT INTO TBL_BUYER
VALUES (SEQ_BUYER.NEXTVAL, '맹구', 35, '남', '서울시 노원구', '010-1313-7854');
INSERT INTO TBL_BUYER
VALUES (SEQ_BUYER.NEXTVAL, '철수', 30, '남', '서울시 용산구', '010-5533-7711');
INSERT INTO TBL_BUYER
VALUES (SEQ_BUYER.NEXTVAL, '훈이', 20, '남', '경기도 남양주시', '010-1234-5678');
INSERT INTO TBL_BUYER
VALUES (SEQ_BUYER.NEXTVAL, '수지', 40, '여', '서울시 강북구', '010-4542-8753');
INSERT INTO TBL_BUYER
VALUES (SEQ_BUYER.NEXTVAL, '봉미선', 50, '여', '서울시 강북구', '010-3456-7575');
INSERT INTO TBL_BUYER
VALUES (SEQ_BUYER.NEXTVAL, '이태희', 20, '여', '서울시 스카이캐슬', '010-7345-1578');


-- 상품
-- 브랜드, 이름, 가격, 재고
INSERT INTO TBL_PRODUCT
VALUES(SEQ_PRODUCT.NEXTVAL, '뉴발란스', '브리즈 신발', 139000, 500);
INSERT INTO TBL_PRODUCT
VALUES(SEQ_PRODUCT.NEXTVAL, '아디다스', '후드집업', 119000, 250);
INSERT INTO TBL_PRODUCT
VALUES(SEQ_PRODUCT.NEXTVAL, '아크테릭스', '후드티', 290000, 100);
INSERT INTO TBL_PRODUCT
VALUES(SEQ_PRODUCT.NEXTVAL, '로라로라', '반팔티셔츠', 38700, 600);
INSERT INTO TBL_PRODUCT
VALUES(SEQ_PRODUCT.NEXTVAL, '엠엘비', '볼캡', 49000, 30);
INSERT INTO TBL_PRODUCT
VALUES(SEQ_PRODUCT.NEXTVAL, '무신사', '스웨이드 가디건', 95890, 170);
INSERT INTO TBL_PRODUCT
VALUES(SEQ_PRODUCT.NEXTVAL, '스웨이드', '청바지', 57600, 310);
INSERT INTO TBL_PRODUCT
VALUES(SEQ_PRODUCT.NEXTVAL, '스파오', '반팔티셔츠', 25900, 120);
INSERT INTO TBL_PRODUCT
VALUES(SEQ_PRODUCT.NEXTVAL, '아이더', '캐시미어 자켓', 618420, 50);
INSERT INTO TBL_PRODUCT
VALUES(SEQ_PRODUCT.NEXTVAL, '스탠리', '텀블러', 62000, 550);


-- 오더
-- 주문 상태, 주문 일자, 주문 완료 일자
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 1, 7);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 2, 3);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 3, 3);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 3, 5);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 4, 1);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 4, 7);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 4, 3);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 4, 2);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 5, 1);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 5, 7);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 5, 9);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 5, 10);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 6, 10);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 7, 8);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 7, 1);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 7, 3);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 7, 5);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 7, 4);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 7, 6);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 7, 8);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 8, 1);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 8, 2);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 8, 3);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 2, 5);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 2, 3);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 5, 4);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 3, 3);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 3, 8);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 1, 10);
INSERT INTO TBL_ORDER(ID, BUYER_ID, PRODUCT_ID)
VALUES(SEQ_ORDER.NEXTVAL, 3, 10);

-- 13) 유저 중 이태희를 태희로 이름 변경
UPDATE TBL_BUYER
SET BUYER_NAME = '태희'
WHERE BUYER_NAME = '이태희';

SELECT *
FROM TBL_BUYER
WHERE ID = 8;

-- 14) 신상품 '나이키', '에어맥스 95', 가격 179000원, 재고 200개를 TBL_PRODUCT 테이블에 추가
INSERT INTO TBL_PRODUCT
VALUES(SEQ_PRODUCT.NEXTVAL, '나이키', '에어맥스 95', 179000, 200);

SELECT *
FROM TBL_PRODUCT;

-- 15) BUYER_NAME이 '철수'인 사람의 핸드폰 번호를 '010-0000-0000'으로 변경
UPDATE TBL_BUYER
SET BUYER_PHONE = '010-0000-0000'
WHERE BUYER_NAME = '철수';

SELECT *
FROM TBL_BUYER;

-- 16) PRODUCT_NAME이 '후드티'인 상품의 가격을 310000으로 인상
UPDATE TBL_PRODUCT
SET PRODUCT_PRICE = '310000'
WHERE PRODUCT_NAME = '후드티';

SELECT *
FROM TBL_PRODUCT;

-- 19) '짱구'가 주문한 상품의 이름과 가격을 조회
SELECT
	PRODUCT_NAME AS "'짱구'가 주문한 상품의 이름",
	PRODUCT_PRICE AS "'짱구'가 주문한 상품의 가격"
FROM TBL_PRODUCT
WHERE ID IN (
	SELECT PRODUCT_ID
	FROM TBL_ORDER
	WHERE BUYER_ID = (
		SELECT ID
		FROM TBL_BUYER
		WHERE BUYER_NAME = '짱구'
	)
);

-- 20) 각 구매자별로 주문한 상품의 총 개수를 조회 (구매자 이름, 주문 건수)
SELECT
	TBB.BUYER_NAME AS "구매자 이름",
	COUNT(TBO.BUYER_ID) AS "주문 건수"
FROM TBL_ORDER TBO
JOIN TBL_BUYER TBB
ON TBO.BUYER_ID = TBB.ID 
GROUP BY TBB.BUYER_NAME, TBO.BUYER_ID;

-- 21) 가장 많이 주문된 상품 3개의 이름과 주문 횟수를 내림차순으로 조회
SELECT COUNT(TBO.PRODUCT_ID) AS "주문 횟수" -- 미완성
FROM TBL_ORDER TBO
JOIN TBL_PRODUCT TBP
ON TBO.PRODUCT_ID = TBP.ID
WHERE PRODUCT_ID IN (
	SELECT *
	FROM (
		SELECT PRODUCT_ID
		FROM TBL_ORDER
		GROUP BY PRODUCT_ID
		ORDER BY COUNT(PRODUCT_ID)
	)
	WHERE ROWNUM <= 3
)
GROUP BY TBO.PRODUCT_ID;

-- 22) 여성 구매자들이 주문한 상품들의 평균 가격을 조회
SELECT ROUND(AVG(TBP.PRODUCT_PRICE)) || '원' AS "여성 구매자들이 주문한 상품들의 평균 가격"
FROM TBL_ORDER TBO
JOIN TBL_PRODUCT TBP
ON TBO.PRODUCT_ID = TBP.ID 
WHERE BUYER_ID IN (
	SELECT ID
	FROM TBL_BUYER
	WHERE BUYER_GENDER = '여'
);

-- 23) 나이가 30세 이상인 남성 구매자들의 이름과 주소를 조회
SELECT
	BUYER_NAME AS "나이가 30세 이상인 남성 구매자들의 이름",
	BUYER_ADDRESS AS "나이가 30세 이상인 남성 구매자들의 주소"
FROM TBL_BUYER
WHERE BUYER_AGE >= 30;

-- 24) 재고가 100개 이하인 상품 목록을 브랜드명과 함께 조회
SELECT ID, PRODUCT_BRAND, PRODUCT_NAME, PRODUCT_STOCK
FROM TBL_PRODUCT
WHERE PRODUCT_STOCK <= 100;

-- 25) '서울시 강북구'에 사는 구매자들의 이름과 핸드폰 번호를 조회
SELECT
	BUYER_NAME AS "'서울시 강북구'에 사는 구매자들의 이름",
	BUYER_PHONE AS "핸드폰 번호"
FROM TBL_BUYER
WHERE BUYER_ADDRESS = '서울시 강북구';

-- 26) 주문 상태가 '배송중'인 주문 내역과 해당 주문자의 이름, 상품명을 조회
SELECT
	TBO.ORDER_STATUS AS "주문 상태가 '배송중'인 주문 내역",
	TBB.BUYER_NAME AS "주문자의 이름",
	TBP.PRODUCT_NAME AS "상품명"
FROM TBL_ORDER TBO
JOIN TBL_BUYER TBB
ON TBO.PRODUCT_ID = TBB.ID 
JOIN TBL_PRODUCT TBP
ON TBO.PRODUCT_ID = TBP.ID
WHERE ORDER_STATUS = '배송중';

-- 27) '훈이' 구매자가 주문한 상품들의 총 가격 합계 조회
SELECT SUM(TBP.PRODUCT_PRICE) AS "'훈이' 구매자가 주문한 상품들의 총 가격 합계"
FROM TBL_ORDER TBO
JOIN TBL_PRODUCT TBP
ON TBO.PRODUCT_ID = TBP.ID
WHERE BUYER_ID = (
	SELECT ID
	FROM TBL_BUYER
	WHERE BUYER_NAME = '훈이'
);

-- 28) 상품별 기대 매출 조회
SELECT
	TBP.PRODUCT_NAME AS "상품 이름",
	COUNT(TBO.PRODUCT_ID)*TBP.PRODUCT_PRICE AS "상품별 기대 매출" 
FROM TBL_ORDER TBO
JOIN TBL_PRODUCT TBP
ON TBO.PRODUCT_ID = TBP.ID 
GROUP BY TBP.PRODUCT_NAME, TBO.PRODUCT_ID, TBP.PRODUCT_PRICE;

-- 29) '유리' 구매자의 주문 내역 중 가장 최근 주문한 상품의 이름과 주문일자를 조회
SELECT
	PRODUCT_NAME AS "'유리' 구매자의 주문 내역 중 가장 최근 주문한 상품의 이름",
	ORDER_START_DATE AS "주문일자"
FROM(
	SELECT *
	FROM TBL_ORDER TBO
	JOIN TBL_PRODUCT TBP
	ON TBO.PRODUCT_ID = TBP.ID
	WHERE BUYER_ID = (
		SELECT ID
		FROM TBL_BUYER
		WHERE BUYER_NAME = '유리'
	)
	ORDER BY ORDER_START_DATE
)
WHERE ROWNUM = 1;


-- 30) 구매자별로 주문 완료 일자가 가장 빠른 주문 내역을 조회
SELECT
	TBB.BUYER_NAME AS "구매자",
	MIN(TBO.ORDER_START_DATE) AS "주문 완료 일자가 가장 빠른 주문 내역"
FROM TBL_ORDER TBO
JOIN TBL_BUYER TBB
ON TBO.BUYER_ID = TBB.ID 
GROUP BY TBB.BUYER_NAME;

-- 31) '스웨이드' 브랜드의 모든 상품 주문 건수를 조회
SELECT *
FROM TBL_ORDER
WHERE PRODUCT_ID = (
	SELECT ID
	FROM TBL_PRODUCT
	WHERE PRODUCT_BRAND = '스웨이드'
);

-- 32) '봉미선' 구매자가 주문한 상품들 중 가격이 5만원 이상인 상품의 이름과 가격을 조회
SELECT
	TBB.BUYER_NAME AS "구매자 이름",
	TBP.PRODUCT_NAME AS "가격이 5만원 이상인 상품",
	TBP.PRODUCT_PRICE AS "가격"
FROM TBL_ORDER TBO
JOIN TBL_PRODUCT TBP
ON TBO.PRODUCT_ID = TBP.ID
JOIN TBL_BUYER TBB
ON TBO.BUYER_ID = TBB.ID
WHERE BUYER_ID = (
	SELECT ID
	FROM TBL_BUYER
	WHERE BUYER_NAME = '봉미선'
)
AND TBP.PRODUCT_PRICE >= 50000;

-- 33) '수지' 구매자의 주소를 '서울시 송파구'로 수정
UPDATE TBL_BUYER
SET BUYER_ADDRESS = '서울시 송파구'
WHERE BUYER_NAME = '수지';

SELECT *
FROM TBL_BUYER;

-- 34) 주문 상태가 '배송중'인 주문을 '배송완료'로 변경
UPDATE TBL_ORDER
SET ORDER_STATUS = '배송완료'
WHERE ORDER_STATUS = '배송중';

SELECT *
FROM TBL_ORDER;

-- 35) 25세 이하인 구매자의 이름, 나이, 구매한 상품명 조회
SELECT
	BUYER_NAME AS "25세 이하인 구매자의 이름",
	BUYER_AGE AS "나이",
	TBP.PRODUCT_NAME AS "구매한 상품명"
FROM TBL_BUYER TBB
JOIN TBL_ORDER TBO
ON TBB.ID = TBO.BUYER_ID
JOIN TBL_PRODUCT TBP
ON TBO.PRODUCT_ID = TBP.ID
WHERE BUYER_AGE <= 25;

-- 36) 특정 상품(예: '볼캡')의 재고 수량을 0으로 변경
UPDATE TBL_PRODUCT
SET PRODUCT_STOCK = '0'
WHERE PRODUCT_NAME = '볼캡'

SELECT *
FROM TBL_PRODUCT; 

-- 37) '아이더' 브랜드 상품을 주문한 구매자들의 이름과 연락처를 조회
SELECT
	BUYER_NAME AS "'아이더' 브랜드 상품을 주문한 구매자들의 이름",
	BUYER_PHONE AS "연락처"
FROM TBL_BUYER
WHERE ID = (
	SELECT BUYER_ID
	FROM TBL_ORDER
	WHERE PRODUCT_ID = (
		SELECT ID
		FROM TBL_PRODUCT
		WHERE PRODUCT_BRAND = '아이더'
	)
);

-- 38) '맹구' 구매자가 주문한 상품들의 가격 총합을 계산
SELECT SUM(TBP.PRODUCT_PRICE) || '원' AS "'맹구' 구매자가 주문한 상품들의 가격 총합"
FROM TBL_ORDER TBO
JOIN TBL_PRODUCT TBP
ON TBO.PRODUCT_ID = TBP.ID
WHERE BUYER_ID  = (
	SELECT ID
	FROM TBL_BUYER
	WHERE BUYER_NAME = '맹구'
);

-- 39) 상품 할인 중 모든 30% 할인가격 조회
SELECT
	PRODUCT_NAME AS "구매자",
	PRODUCT_PRICE*0.7 AS "상품 30% 할인가격"
FROM TBL_PRODUCT;

-- 40) 구매자별로 주문한 상품 개수를 조회
SELECT
	TBB.BUYER_NAME AS "구매자",
	COUNT(PRODUCT_ID) || '개' AS "주문한 상품 개수"
FROM TBL_ORDER TBO
JOIN TBL_BUYER TBB
ON TBO.BUYER_ID = TBB.ID
GROUP BY TBB.BUYER_NAME;

-- 41) '짱구' 구매자가 주문한 상품 중 가격이 가장 비싼 상품을 조회
SELECT
	PRODUCT_NAME AS "'짱구' 구매자가 주문한 상품 중 가격이 가장 비싼 상품",
	PRODUCT_PRICE || '원' AS "가격"
FROM TBL_PRODUCT
WHERE PRODUCT_PRICE = (
	SELECT MAX(TBP.PRODUCT_PRICE)
	FROM TBL_ORDER TBO
	JOIN TBL_PRODUCT TBP
	ON TBO.PRODUCT_ID = TBP.ID
	WHERE BUYER_ID = (
		SELECT ID
		FROM TBL_BUYER
		WHERE BUYER_NAME = '짱구'
	)
);

-- 42) '철수'와 '훈이'가 주문한 상품들을 조회하되 중복 없이 출력
SELECT TBP.PRODUCT_NAME AS "'철수'와 '훈이'가 주문한 상품 (중복제외)"
FROM TBL_ORDER TBO
JOIN TBL_PRODUCT TBP
ON TBO.PRODUCT_ID = TBP.ID 
WHERE BUYER_ID IN (
	SELECT ID
	FROM TBL_BUYER
	WHERE BUYER_NAME IN ('철수', '훈이')
)
GROUP BY TBP.PRODUCT_NAME;

-- 43) '강북구'에 사는 여성 구매자들의 주문 내역을 조회
SELECT *
FROM TBL_ORDER
WHERE BUYER_ID = (
	SELECT ID
	FROM TBL_BUYER
	WHERE BUYER_ADDRESS LIKE '%강북구%'
	AND BUYER_GENDER = '여'
);

-- 44) 구매자 이름과 그가 주문한 상품 이름, 주문 상태를 함께 출력
SELECT
	TBB.BUYER_NAME AS "구매자 이름",
	TBP.PRODUCT_NAME AS "주문한 상품 이름",
	TBO.ORDER_STATUS AS "주문 상태"
FROM TBL_ORDER TBO
JOIN TBL_BUYER TBB
ON TBO.BUYER_ID = TBB.ID
JOIN TBL_PRODUCT TBP
ON TBO.PRODUCT_ID = TBP.ID;

-- 45) 모든 상품의 평균 가격을 구하고, 평균 이상 가격인 상품들을 조회
SELECT *
FROM TBL_PRODUCT
WHERE PRODUCT_PRICE > (
	SELECT AVG(PRODUCT_PRICE)
	FROM TBL_PRODUCT
);

-- 46) '스파오' 브랜드 상품의 재고를 50개 이하인 경우 재고를 100개로 수정
UPDATE TBL_PRODUCT
SET PRODUCT_STOCK = 100
WHERE PRODUCT_STOCK <= 50;

SELECT *
FROM TBL_PRODUCT;

-- 보류
-- 17) BUYER_NAME이 '맹구'인 구매자의 정보를 TBL_BUYER에서 삭제 (단, 주문 이력이 있을 경우 삭제되지 않음)
DELETE 
FROM TBL_BUYER
WHERE BUYER_NAME = '맹구';

SELECT *
FROM TBL_BUYER;

-- 18) PRODUCT_NAME이 '텀블러'인 상품을 TBL_PRODUCT 테이블에서 삭제
DELETE FROM TBL_PRODUCT
WHERE PRODUCT_NAME = '텀블러';

SELECT *
FROM TBL_PRODUCT;

---

CREATE TABLE TBL_EMPLOYEE(
	ID NUMBER CONSTRAINT PK_EMPLOYEE PRIMARY KEY,
	EMPLOYEE_NAME VARCHAR2(255)
);

CREATE TABLE TBL_INCOME(
	ID NUMBER CONSTRAINT PK_INCOME PRIMARY KEY,
	INCOME NUMBER,
	INCOME_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	EMPLOYEE_ID NUMBER,
	CONSTRAINT FK_INCOME_EMPLOYEE FOREIGN KEY(EMPLOYEE_ID)
	REFERENCES TBL_EMPLOYEE(ID)
);

INSERT INTO TBL_EMPLOYEE
VALUES(1, '홍길동');
INSERT INTO TBL_EMPLOYEE
VALUES(2, '장보고');
INSERT INTO TBL_EMPLOYEE
VALUES(3, '이순신');

INSERT INTO TBL_INCOME
VALUES (1, 100000, 1);
INSERT INTO TBL_INCOME
VALUES (2, 150000, 1);

SELECT *
FROM TBL_INCOME TI
RIGHT JOIN TBL_EMPLOYEE TE
ON TI.EMPLOYEE_ID  = TE.ID;